//
//	ebnf grammar definition in ebnf.
//
//	Productions are expressions constructed from terms and the following operators, in increasing precedence:
//
//	|   alternation
//	()  grouping
//	[]  option (0 or 1 times)
//	{}  repetition (0 to n times)
//

// productions

Grammar		   = Production { Production } .
Production     = name "=" Alternation "." .
Alternation    = Sequence { "|" Sequence } .
Sequence       = Term { Term } .
Term           = name | Token | Group | Option | Repetition .
Group          = "(" Alternation ")" .
Option         = "[" Alternation "]" .
Repetition     = "{" Alternation "}" .
Token		   = Range | token .
Range		   = singleToken "…" singleToken.

// terminals

char   = "\x09" | "\x0A" | "\x0D" | "\x20" … "\uD7FF" | "\uE000" … "\uFFFD" | "\U00010000" … "\U0010FFFF" .
singleToken  = `"` char `"` .
token  = `"` char { char } `"` .
name   = pname | tname .
pname  =  "A" … "Z" { "a" … "z" | "A" … "Z" |  "0" … "9" | "_" } .
tname  =  "a" … "z" { "a" … "z" | "A" … "Z" |  "0" … "9" | "_" } .
